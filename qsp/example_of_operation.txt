#### examples of operation ####

# particle_registers[0:2] # QuantumRegisterのリスト [QuantumRegister(4, 'particle0'), QuantumRegister(4, 'particle1')]
# particle_registers[:2][1] # QuantumRegister # リストの第１成分 QuantumRegister(4, 'particle1')
# particle_registers[:2][1][0:2] # Qubitのリスト
# particle_registers[:2][1][0] # Qubit # Qubit(QuantumRegister(4, 'particle1'), 0)

## operate x gate to one certain qubit
# circuit.x(((L + 1) * d + 1) * M)
# circuit.h(particle_registers[0])
# circuit.h(particle_registers[0])
# circuit.h(ancilla_register_h0[1])

## operate x gate to one certain particle register
# circuit.x(particle_registers[0])

## operate x gate to all qubits
# for i in range(M):
#     circuit.x(particle_registers[i])

# circuit.draw('mpl') # 1つのparticleに対して下位 L* d ビットが運動量の大きさ、次のdビットが符号、最後1ビットがoccupancy

## incrementGates
def increGate(reg_size):
#     inc_num = reg_size
#     inc_circuit = QuantumCircuit(inc_num + 1)
#     inc_circuit.x(inc_num)
#     for iqubit in range(inc_num):
#         inc_circuit.cx(inc_num, iqubit)
#         if iqubit > 0:
#             inc_circuit.x(range(iqubit))
#         if iqubit == inc_num - 1:
#             inc_circuit.x(inc_num - 1)
#             inc_circuit.x(inc_num)
#         inc_circuit.mcx(list(range(iqubit + 1)), inc_num)
#         if iqubit > 0:
#             inc_circuit.x(range(iqubit))
#         if iqubit == inc_num - 1:
#             inc_circuit.x(inc_num - 1)
#             inc_circuit.x(inc_num)
#     inc_gate = inc_circuit.to_gate()
#     return inc_gate

# def invIncreGate(reg_size):
#     inv_inc_num = reg_size
#     inv_inc_circuit = QuantumCircuit(inv_inc_num + 1)
#     for iqubit in range(inv_inc_num - 1, -1, -1):
#         if iqubit > 0:
#             inv_inc_circuit.x(range(iqubit))
#         if iqubit == inv_inc_num - 1:
#             inv_inc_circuit.x(inv_inc_num - 1)
#             inv_inc_circuit.x(inv_inc_num)
#         inv_inc_circuit.mcx(list(range(iqubit + 1)), inv_inc_num)
#         if iqubit > 0:
#             inv_inc_circuit.x(range(iqubit))
#         if iqubit == inv_inc_num - 1:
#             inv_inc_circuit.x(inv_inc_num - 1)
#             inv_inc_circuit.x(inv_inc_num)
#         inv_inc_circuit.cx(inv_inc_num, iqubit)
#     inv_inc_circuit.x(inv_inc_num)
#     inv_inc_gate = inv_inc_circuit.to_gate()
#     return inv_inc_gate

# # example and visualization of increment operation
# circuit, particle_regs, anc_reg_h0, anc_reg_symm, anc_incre, cla_reg_symm, particle_1D_list = init(M, N_abs, d)
# inc_gate= increGate(particle_regs[0].size)
# circuit.x(particle_regs[0][:])
# circuit.barrier()
# circuit.append(inc_gate, qargs=particle_regs[0][:] + [anc_incre])
# circuit.decompose().draw('mpl')


## interaction Hamiltonian
# n = 4
# M = 4
# N_abs = 1
# circuit, particle_regs, anc_reg_h0, anc_reg_symm, anc_incre, cla_reg_symm, particle_1D_list = init(M, N_abs, d)

# # args are iposition, ireg, jreg, kreg, lreg
# delta = 1
# coupling_lambda = 0.1
# ipos = 2
# Delta = delta * coupling_lambda / 96
# pos_bits = bin(ipos)[2:]
# ireg = particle_regs[0]
# jreg = particle_regs[1]
# kreg = particle_regs[2]
# lreg = particle_regs[3]
# nfrak = 2 * ireg.size

# for ibit in range(N_abs * d + d): # flip qubits to make |qi>|-qj> <=> |11...1>
#     if len(pos_bits) > ibit:
#         if int(pos_bits[-(ibit+1)]) == 1:
#             circuit.cx(ireg[(N_abs + 1) * d], ireg[ibit])
#             circuit.cx(jreg[(N_abs + 1) * d], jreg[ibit])
#             circuit.cx(kreg[(N_abs + 1) * d], kreg[ibit])
#             circuit.cx(lreg[(N_abs + 1) * d], lreg[ibit])
# circuit.cx(lreg[(N_abs + 1) * d], ireg[(N_abs + 1) * d])
# circuit.cx(lreg[(N_abs + 1) * d], jreg[(N_abs + 1) * d])
# circuit.cx(lreg[(N_abs + 1) * d], kreg[(N_abs + 1) * d])

# circuit.barrier()

# circuit.x(ireg[:N])
# circuit.x(jreg[:N])
# circuit.x(kreg[:N])
# circuit.x(lreg[:N_abs + d])
# mcrx = RXGate(Delta * 1000).control(4 * ireg.size - 1)
# mcrx.name = 'MultiCNOT'
# circuit.append(mcrx, qargs=ireg[:] + jreg[:] + kreg[:] + lreg[:jreg.size-1] + [lreg[lreg.size-1]])
# circuit.x(ireg[:N])
# circuit.x(jreg[:N])
# circuit.x(kreg[:N])
# circuit.x(lreg[:N_abs + d])

# circuit.barrier()

# circuit.cx(lreg[(N_abs + 1) * d], ireg[(N_abs + 1) * d])
# circuit.cx(lreg[(N_abs + 1) * d], jreg[(N_abs + 1) * d])
# circuit.cx(lreg[(N_abs + 1) * d], kreg[(N_abs + 1) * d])
# for ibit in range(N_abs * d + d): # flip qubits to make |qi>|-qj> <=> |11...1>
#     if len(pos_bits) > ibit:
#         if int(pos_bits[-(ibit+1)]) == 1:
#             circuit.cx(ireg[(N_abs + 1) * d], ireg[ibit])
#             circuit.cx(jreg[(N_abs + 1) * d], jreg[ibit])
#             circuit.cx(kreg[(N_abs + 1) * d], kreg[ibit])
#             circuit.cx(lreg[(N_abs + 1) * d], lreg[ibit])

# circuit.draw('mpl')



# interaction Hamiltonian to optimize # of QuantumGates

## optimization of CNOT
# n = 4
# M = 4
# N_abs = 1
# N = N_abs * d + d + 1
# circuit, particle_regs, anc_reg_h0, anc_reg_symm, anc_incre, cla_reg_symm, particle_1D_list = init(M, N_abs, d)

# hamming_list = ['1000', '1100', '0100', '0110', '0010', '0000', '0001', '0101']
# ipos = 2
# delta = 1
# coupling_lambda = 0.1
# Delta = delta * coupling_lambda / 96
# ireg = particle_regs[0]
# jreg = particle_regs[1]
# kreg = particle_regs[2]
# lreg = particle_regs[3]
# pos_bits = bin(ipos)[2:]
# reg_list = [ireg, jreg, kreg, lreg]

# for inum, ihamming in enumerate(hamming_list):
#     if inum == 0:
#         for istring in range(len(hamming_list[0])):
#             if hamming_list[inum][istring] == '1':
#                 for ibit in range(N_abs * d + d):
#                     if len(pos_bits) > ibit:
#                         if int(pos_bits[-(ibit+1)]) == 1:
#                             circuit.x(reg_list[istring][ibit])
#                             circuit.x(reg_list[istring][N-1])
#         for ibit in range(N_abs * d + d): # flip qubits to make |qi>|-qj> <=> |11...1>
#             if len(pos_bits) > ibit:
#                 if int(pos_bits[-(ibit+1)]) == 1:
#                     for xreg in reg_list:
#                         circuit.cx(xreg[(N_abs + 1) * d], xreg[ibit])
#         for xnum, xreg in enumerate(reg_list):
#             if xnum != 3:
#                 circuit.cx(lreg[(N_abs + 1) * d], xreg[(N_abs + 1) * d])

#         circuit.barrier()
#         circuit.x(ireg[:N] + jreg[:N] + kreg[:N] + lreg[:N_abs+d])
#         mcrx = RXGate(Delta * 1000).control(4 * ireg.size - 1)
#         mcrx.name = 'MultiCNOT'
#         circuit.append(mcrx, qargs=ireg[:] + jreg[:] + kreg[:] + lreg[:jreg.size-1] + [lreg[lreg.size-1]])
#         circuit.x(ireg[:N] + jreg[:N] + kreg[:N] + lreg[:N_abs+d])
#         circuit.barrier()

#     elif inum < len(hamming_list) - 1:
#         for istring in range(len(hamming_list[0])):
#             if inum == 0:
#                 break
#             if hamming_list[inum - 1][istring] != hamming_list[inum][istring]:
#                 if istring != 3:
#                     for ibit in range(N_abs * d + d):
#                         if len(pos_bits) > ibit:
#                             if int(pos_bits[-(ibit+1)]) == 1:
#                                 circuit.cx(reg_list[istring][N-1], reg_list[istring][ibit])
#                                 circuit.cx(lreg[N-1], reg_list[istring][N-1])
#                                 circuit.x(reg_list[istring][ibit])
#                                 circuit.x(reg_list[istring][N-1])
#                                 circuit.cx(lreg[N-1], reg_list[istring][N-1])
#                                 circuit.cx(reg_list[istring][N-1], reg_list[istring][ibit])
#                 elif istring == 3:
#                     for ibit in range(N_abs * d + d):
#                         if len(pos_bits) > ibit:
#                             if int(pos_bits[-(ibit+1)]) == 1:
#                                 circuit.cx(lreg[N-1], lreg[ibit])
#                                 circuit.x(lreg[ibit])
#                                 circuit.x(lreg[N-1])
#                                 circuit.cx(lreg[N-1], lreg[ibit])
#                 else: print(f'You have something wrong with {istring}th string')
#         circuit.barrier()
#         circuit.x(ireg[:N] + jreg[:N] + kreg[:N] + lreg[:N_abs+d])
#         mcrx = RXGate(Delta * 1000).control(4 * ireg.size - 1)
#         mcrx.name = 'MultiCNOT'
#         circuit.append(mcrx, qargs=ireg[:] + jreg[:] + kreg[:] + lreg[:jreg.size-1] + [lreg[lreg.size-1]])
#         circuit.x(ireg[:N] + jreg[:N] + kreg[:N] + lreg[:N_abs+d])
#         circuit.barrier()

#     elif inum == len(hamming_list) - 1:
#         for istring in range(len(hamming_list[0])):
#             if inum == 0:
#                 break
#             if hamming_list[inum - 1][istring] != hamming_list[inum][istring]:
#                 targstring = istring
#                 if istring != 3:
#                     for ibit in range(N_abs * d + d):
#                         if len(pos_bits) > ibit:
#                             if int(pos_bits[-(ibit+1)]) == 1:
#                                 circuit.cx(reg_list[istring][N-1], reg_list[istring][ibit])
#                                 circuit.cx(lreg[N-1], reg_list[istring][N-1])
#                                 circuit.x(reg_list[istring][ibit])
#                                 circuit.x(reg_list[istring][N-1])
#                                 circuit.cx(lreg[N-1], reg_list[istring][N-1])
#                                 circuit.cx(reg_list[istring][N-1], reg_list[istring][ibit])
#                 elif istring == 3:
#                     for ibit in range(N_abs * d + d):
#                         if len(pos_bits) > ibit:
#                             if int(pos_bits[-(ibit+1)]) == 1:
#                                 circuit.cx(lreg[N-1], lreg[ibit])
#                                 circuit.x(lreg[ibit])
#                                 circuit.x(lreg[N-1])
#                                 circuit.cx(lreg[N-1], lreg[ibit])
#                 else: print(f'You have something wrong with {istring}th string')
#         circuit.barrier()

#         circuit.x(ireg[:N] + jreg[:N] + kreg[:N] + lreg[:N_abs+d])
#         mcrx = RXGate(Delta * 1000).control(4 * ireg.size - 1)
#         mcrx.name = 'MultiCNOT'
#         circuit.append(mcrx, qargs=ireg[:] + jreg[:] + kreg[:] + lreg[:jreg.size-1] + [lreg[lreg.size-1]])
#         circuit.x(ireg[:N] + jreg[:N] + kreg[:N] + lreg[:N_abs+d])

#         circuit.barrier()
#         for ibit in range(N_abs * d + d):
#             if len(pos_bits) > ibit:
#                 if int(pos_bits[-(ibit+1)]) == 1:
#                     for xreg in reg_list:
#                         circuit.cx(xreg[(N_abs + 1) * d], xreg[ibit])
#         for xnum, xreg in enumerate(reg_list):
#             if xnum != 3:
#                 circuit.cx(lreg[(N_abs + 1) * d], xreg[(N_abs + 1) * d])
#         circuit.barrier()
        
#         for istring in range(len(hamming_list[0])):
#             if hamming_list[inum][istring] == '1':
#                 for ibit in range(N_abs * d + d):
#                     if len(pos_bits) > ibit:
#                         if int(pos_bits[-(ibit+1)]) == 1:
#                             circuit.x(reg_list[istring][ibit])
#                             circuit.x(reg_list[istring][N-1])

# circuit.draw('mpl')


## sample
# from qiskit import QuantumCircuit, QuantumRegister
# from qiskit.circuit import Gate

# test_circuit = QuantumCircuit(3)
# custom_gate = Gate(name='Gate', num_qubits=3, params=[0.1, 0.2]) # maek meaningless Gate
# test_circuit.append(custom_gate, qargs=[0, 1, 2])

# test_circuit.decompose().draw('mpl')

## interaction scheme
n = 4
M = 4
N_abs = 1
d = 1
N = N_abs * d + d + 1
circuit, particle_regs, anc_reg_h0, anc_reg_symm, cla_reg_symm, cla_measure, particle_1D_list = init(M, N_abs, d)
hamming_list = ['1000', '1100', '0100', '0110', '0010', '0000', '0001', '0101']
two_hamming_list = ['00', '10']
three_hamming_list = ['000', '010', '011', '001', '101', '111', '110', '100'] # ith register corresponds to invariant register
three_hamming_list = ['000']
delta = 1
coupling_lambda = 0.1
Delta = delta * coupling_lambda / (96 * (M ** 2))

for ipos in range(2 ** (N_abs * d + d)):
    for inum, ireg in enumerate(particle_regs):
        for jnum, jreg in enumerate(particle_regs):
            for knum, kreg in enumerate(particle_regs):
                for lnum, lreg in enumerate(particle_regs):
                    if inum <= jnum and jnum <= knum and knum <= lnum:
                        if inum == jnum:
                            if jnum == knum:
                                if knum == lnum:
                                    int_gate = intHamiltonianFourIndices(ireg, ipos, Delta)
                                    int_gate.name = f'pos{ipos} intH'
                                    circuit.append(int_gate, qargs=ireg[:])
                                else:
                                    int_gate = intHamiltonianThreeIndices(ireg, lreg, ipos, two_hamming_list, Delta)
                                    int_gate.name = f'pos{ipos} intH'
                                    circuit.append(int_gate, qargs=ireg[:]+lreg[:])
                            else:
                                if knum == lnum:
                                    int_gate = intHamiltonianTwoPairs(ireg, kreg, ipos, two_hamming_list, Delta)
                                    int_gate.name = f'pos{ipos} intH'
                                    circuit.append(int_gate, qargs=ireg[:]+kreg[:])
                                else:
                                    int_gate = intHamiltonianTwoIndices(ireg, kreg, lreg, ipos, three_hamming_list, Delta)
                                    int_gate.name = f'pos{ipos} intH'
                                    circuit.append(int_gate, qargs=ireg[:]+kreg[:]+lreg[:])
                        else:
                            if jnum == knum:
                                if knum == lnum:
                                    int_gate = intHamiltonianThreeIndices(ireg, jreg, ipos, two_hamming_list, Delta)
                                    int_gate.name = f'pos{ipos} intH'
                                    circuit.append(int_gate, qargs=ireg[:]+jreg[:])
                                else:
                                    int_gate = intHamiltonianTwoIndices(jreg, ireg, lreg, ipos, three_hamming_list, Delta)
                                    int_gate.name = f'pos{ipos} intH'
                                    circuit.append(int_gate, qargs=jreg[:]+ireg[:]+lreg[:])
                            else:
                                if knum == lnum:
                                    int_gate = intHamiltonianTwoIndices(kreg, ireg, jreg, ipos, three_hamming_list, Delta)
                                    int_gate.name = f'pos{ipos} intH'
                                    circuit.append(int_gate, qargs=kreg[:]+ireg[:]+jreg[:])
                                else:
                                    int_gate = interactionHamiltonianAllDiffer(ireg, jreg, kreg, lreg, ipos, hamming_list, Delta)
                                    int_gate.name = f'pos{ipos} intH'
                                    circuit.append(int_gate, qargs=ireg[:]+jreg[:]+kreg[:]+lreg[:])

circuit.draw('mpl')

# time evolution scheme (probably have something wrong with it in intH part)

M = 2
N_abs = 1
d = 1
N = N_abs * d + d + 1
n = 1

tau_0 = 1 # Wigner delay
tau_I = 0 # length of time of interaction
delta = 1 # time step
coupling_lambda = 0.1
circuit, particle_regs, anc_reg_h0, anc_reg_symm, cla_reg_symm, cla_measure, particle_1D_list = init(M, N_abs, d)
m_0 = 0.5 # chosen to represent a relevant enrgy scale in the weak coupling regime
hamming_list = ['1000', '1100', '0100', '0110', '0010', '0000', '0001', '0101']
two_hamming_list = ['00', '10']
three_hamming_list = ['000', '010', '011', '001', '101', '111', '110', '100'] # ith register corresponds to invariant register
# three_hamming_list = ['000']

tau = 0
m_t = m_0
lambda_t = 0

m_ren = 0
lambda_ren = 1

while tau <= tau_0 + tau_I:
    Delta = 100 * delta * lambda_t / (96 * (M ** 2))
    # ## take summation of momenta of all particles
    # dphi = 2 * np.pi / (2 ** anc_reg_h0.size)
    # phi_add_gate = phiAdditionGate(dphi, particle_regs, anc_reg_h0)
    # phi_add_gate.name = 'phi addition'
    # circuit.append(phi_add_gate, qargs=particle_1D_list + anc_reg_h0[:])

    # # inverse QFT
    # inv_qft_gate = invQFT(len(anc_reg_h0[:]))
    # inv_qft_gate.name = 'invQFT'
    # circuit.append(inv_qft_gate, qargs=anc_reg_h0[:])

    # ## operate Sphi gate to evolve time
    # s_gate, cs_gate = sPhiGate(anc_reg_h0, M, delta)
    # s_gate.name = 'Sphi gate'
    # circuit.append(s_gate, qargs=anc_reg_h0)

    # ## uncompute phi ancilla qubits
    # # QFT
    # # circuit.barrier()
    # qft_gate = qFT(len(anc_reg_h0[:]))
    # qft_gate.name = 'QFT'
    # circuit.append(qft_gate, qargs=anc_reg_h0[:])
    # # uncompute
    # uncompute_gate = uncomputePhiGate(dphi, particle_regs, anc_reg_h0)
    # uncompute_gate.name = 'uncompute phi'
    # circuit.append(uncompute_gate, qargs=particle_1D_list + anc_reg_h0[:])
    # circuit.barrier()

    # for imode in range(2 ** N_abs):
    #     for inum, ireg in enumerate(particle_regs):
    #         for jnum, jreg in enumerate(particle_regs):
    #             if inum != jnum:
    #                 sq_gate, modebit = squeezeGate(imode, ireg, jreg)
    #                 sq_gate.name = f'mode{imode+(1/2)} sq'
    #                 circuit.append(sq_gate, qargs=ireg[:] + jreg[:])

    # circuit.barrier()

    # # symmetric QFT
    # for ireg in range(M):
    #     change_gate = changeBasis(particle_regs[ireg])
    #     change_gate.name = 'change basis'
    #     circuit.append(change_gate, qargs=particle_regs[ireg][:])
    #     qft_gate =qFT(particle_regs[ireg].size-1)
    #     qft_gate.name = 'QFT'
    #     circuit.append(qft_gate, qargs=particle_regs[ireg][:-1])

    # circuit.barrier()

    for ipos in range(2 ** (N_abs * d + d)):
        for inum, ireg in enumerate(particle_regs):
            for jnum, jreg in enumerate(particle_regs):
                for knum, kreg in enumerate(particle_regs):
                    for lnum, lreg in enumerate(particle_regs):
                        if inum <= jnum and jnum <= knum and knum <= lnum:
                            if inum == jnum:
                                if jnum == knum:
                                    if knum == lnum:
                                        int_gate = intHamiltonianFourIndices(ireg, ipos, Delta)
                                        int_gate.name = f'pos{ipos} intH4'
                                        circuit.append(int_gate, qargs=ireg[:])
                                    else:
                                        int_gate = intHamiltonianThreeIndices(ireg, lreg, ipos, two_hamming_list, Delta)
                                        int_gate.name = f'pos{ipos} intH3'
                                        circuit.append(int_gate, qargs=ireg[:]+lreg[:])
                                else:
                                    if knum == lnum:
                                        int_gate = intHamiltonianTwoPairs(ireg, kreg, ipos, two_hamming_list, Delta)
                                        int_gate.name = f'pos{ipos} intH22'
                                        circuit.append(int_gate, qargs=ireg[:]+kreg[:])
                                    else:
                                        int_gate = intHamiltonianTwoIndices(ireg, kreg, lreg, ipos, three_hamming_list, Delta)
                                        int_gate.name = f'pos{ipos} intH2'
                                        circuit.append(int_gate, qargs=ireg[:]+kreg[:]+lreg[:])
                            else:
                                if jnum == knum:
                                    if knum == lnum:
                                        int_gate = intHamiltonianThreeIndices(ireg, jreg, ipos, two_hamming_list, Delta)
                                        int_gate.name = f'pos{ipos} intH3'
                                        # circuit.append(int_gate, qargs=ireg[:]+jreg[:])
                                    else:
                                        int_gate = intHamiltonianTwoIndices(jreg, ireg, lreg, ipos, three_hamming_list, Delta)
                                        int_gate.name = f'pos{ipos} intH2'
                                        circuit.append(int_gate, qargs=jreg[:]+ireg[:]+lreg[:])
                                else:
                                    if knum == lnum:
                                        int_gate = intHamiltonianTwoIndices(kreg, ireg, jreg, ipos, three_hamming_list, Delta)
                                        int_gate.name = f'pos{ipos} intH2'
                                        circuit.append(int_gate, qargs=kreg[:]+ireg[:]+jreg[:])
                                    else:
                                        int_gate = interactionHamiltonianAllDiffer(ireg, jreg, kreg, lreg, ipos, hamming_list, Delta)
                                        int_gate.name = f'pos{ipos} intH'
                                        circuit.append(int_gate, qargs=ireg[:]+jreg[:]+kreg[:]+lreg[:])
        circuit.barrier()

    # circuit.barrier()

    # # symmetric QFT
    # for ireg in range(M):
    #     inv_qft_gate =invQFT(particle_regs[ireg].size-1)
    #     inv_qft_gate.name = 'invQFT'
    #     circuit.append(inv_qft_gate, qargs=particle_regs[ireg][:-1])
    #     change_gate = changeBasis(particle_regs[ireg])
    #     change_gate.name = 'change basis'
    #     circuit.append(change_gate, qargs=particle_regs[ireg][:])

    tau += delta
    if tau < tau_0: # turn on interaction adiabatically
        lambda_t = lambda_ren * (tau / tau_0)
        m_t = m_0 * (1 - (tau / tau_0)) + m_ren * (tau / tau_0)
    elif tau_0 <= tau : # interaction completely
        m_t = m_ren
        lambda_t = lambda_ren
    circuit.barrier()

# circuit.decompose().draw('mpl')


def threeIndicesOp(ireg, jreg, ipos, Delta):
    A = annihilationCreationOpPerRegInPos(ipos, ireg, False, N, M) + annihilationCreationOpPerRegInPos(ipos, ireg, True, N, M)
    B = annihilationCreationOpPerRegInPos(ipos, jreg, False, N, M) + annihilationCreationOpPerRegInPos(ipos, jreg, True, N, M)
    ln_exp = -1j * Delta * A @ B
    return expm(ln_exp)

def allDifferOp(ireg, jreg, kreg, lreg, ipos, Delta):
    A = annihilationCreationOpPerRegInPos(ipos, ireg, False, N, M) + annihilationCreationOpPerRegInPos(ipos, ireg, True, N, M)
    B = annihilationCreationOpPerRegInPos(ipos, jreg, False, N, M) + annihilationCreationOpPerRegInPos(ipos, jreg, True, N, M)
    C = annihilationCreationOpPerRegInPos(ipos, kreg, False, N, M) + annihilationCreationOpPerRegInPos(ipos, kreg, True, N, M)
    D = annihilationCreationOpPerRegInPos(ipos, lreg, False, N, M) + annihilationCreationOpPerRegInPos(ipos, lreg, True, N, M)
    ln_exp = -1j * Delta * (A @ B @ C @ D)
    return expm(ln_exp)

# free time evolution previous implement

# you can check the motion of wave packets
# time evolution scheme
n = 1
M = 1
N_abs = 3
N = N_abs + 2
a_s = 1
m = 0
circuit, particle_regs, anc_reg_h0, anc_reg_symm, cla_reg_symm, cla_measure, particle_1D_list = init(M, N_abs, d)

# delta_t = np.pi/3 * 4
delta_t = 5
pos_trans_mat = np.zeros((n, d))
pos_trans_mat[0][0] = 8 # 第0量子レジスタの第0次元に存在する粒子をhogehogeマス移動
mom_trans_mat = np.zeros((n, d))
mom_trans_mat[0][0] = 2 # 第0量子レジスタの第0次元に存在する粒子の運動量の中心をhogehogeマス移動

# ## localize wave packets
# for ireg in range(n):
#     # gauss_gate = preWavePacket(particle_regs[ireg])
#     wave_packet_gate = wavePacket(particle_regs[ireg])
#     wave_packet_gate.name = f'{ireg}th wave packet'
#     circuit.append(wave_packet_gate, qargs=particle_regs[ireg][:])

# # circuit.x(particle_regs[0][0])
# circuit.x(particle_regs[0][1])
# circuit.x(particle_regs[0][2])

## translation in position space
# change basis
# circuit.barrier()

# for ireg in range(n):
#     basis_change_gate = changeBasis(particle_regs[ireg])
#     basis_change_gate.name = 'change basis'
#     circuit.append(basis_change_gate, qargs=particle_regs[ireg][:])

# for ireg in range(n): # ireg番目の量子レジスタに作用
#     for idim in range(d): # idim次元目を考える
#         trans_gate = translateGate(pos_trans_mat[ireg][idim], particle_regs[ireg], True)
#         trans_gate.name = f'{ireg}th position {pos_trans_mat[ireg][idim]} trans'
#         circuit.append(trans_gate, qargs=particle_regs[ireg][:])

## translation in momentum space
# circuit.barrier()

# # QFT
# for ireg in range(n):
#     qft_gate = qFT(particle_regs[ireg].size-1)
#     qft_gate.name = 'QFT'
#     circuit.append(qft_gate, qargs=particle_regs[ireg][:N-1])

# ## translation
# for ireg in range(n): # ireg番目の量子レジスタに作用
#     for idim in range(d): # idim次元目を考える
#         trans_gate = translateGate(mom_trans_mat[ireg][idim], particle_regs[ireg], False)
#         trans_gate.name = f'{ireg}th momentum {mom_trans_mat[ireg][idim]} trans'
#         circuit.append(trans_gate, qargs=particle_regs[ireg][:])

# # inverse symmetric QFT
# for ireg in range(n):
#     inv_qft_gate = invQFT(particle_regs[ireg].size-1)
#     inv_qft_gate.name = 'inverse QFT'
#     circuit.append(inv_qft_gate, qargs=particle_regs[ireg][:N-1])

# ## change basis
# for ireg in range(n):
#     basis_change_gate = changeBasis(particle_regs[ireg])
#     basis_change_gate.name = 'change basis'
#     circuit.append(basis_change_gate, qargs=particle_regs[ireg][:])

## take summation of momenta of all particles
dphi = 2 * np.pi / (2 ** anc_reg_h0.size)
phi_add_gate = phiAdditionGate(dphi, particle_regs, anc_reg_h0)
phi_add_gate.name = 'phi addition'
circuit.append(phi_add_gate, qargs=particle_1D_list + anc_reg_h0[:])

# inverse QFT
inv_qft_gate = invQFT(len(anc_reg_h0[:]))
inv_qft_gate.name = 'invQFT'
circuit.append(inv_qft_gate, qargs=anc_reg_h0[:])

## operate Sphi gate to evolve time
s_gate, cs_gate = sPhiGate(anc_reg_h0, M, delta_t, a_s, m)
s_gate.name = 'Sphi gate'
circuit.append(s_gate, qargs=anc_reg_h0)

## uncompute phi ancilla qubits
# QFT
circuit.barrier()
qft_gate = qFT(len(anc_reg_h0[:]))
qft_gate.name = 'QFT'
circuit.append(qft_gate, qargs=anc_reg_h0[:])
# uncompute
uncompute_gate = uncomputePhiGate(dphi, particle_regs, anc_reg_h0)
uncompute_gate.name = 'uncompute phi'
circuit.append(uncompute_gate, qargs=particle_1D_list + anc_reg_h0[:])

# # operate Sphi gate to evolve time
# s_gate, cs_gate = sPhi(M, delta_t, particle_regs, a_s, m)
# s_gate.name = 'Sphi gate'
# circuit.append(s_gate, qargs=particle_1D_list)


# ## you can check the motion of the wave packet
# # change basis
# for ireg in range(n):
#     basis_change_gate = changeBasis(particle_regs[ireg])
#     basis_change_gate.name = 'change basis'
#     circuit.append(basis_change_gate, qargs=particle_regs[ireg][:])
# # QFT
# qft_gate = qFT(len(particle_regs[0][:N-1]))
# qft_gate.name = 'QFT'
# circuit.append(qft_gate, qargs=particle_regs[0][:N-1])

# circuit.decompose().draw('mpl')